name: Metrics Governance

on:
  pull_request:
    paths:
      - 'metrics/spec/**'
      - 'scripts/**'
      - 'src/metrics/**'
      - 'grafana/**'
  push:
    branches: [ main ]
    paths:
      - 'metrics/spec/**'
      - 'scripts/**'
      - 'src/metrics/**'
      - 'grafana/**'

jobs:
  metrics-governance:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Enforce no deep metrics imports (non-tests)
        run: |
          python scripts/check_no_deep_metrics_imports.py

      - name: Verify dashboards (semantic drift) and write
        run: |
          python scripts/gen_dashboards_modular.py --verify

      - name: Validate spec-to-panels coverage
        run: |
          python scripts/validate_spec_panel_coverage.py --allow-partial --list-missing

      - name: Install promtool (pinned)
        env:
          PROM_VERSION: v3.5.0
        run: |
          curl -L -o prom.tar.gz https://github.com/prometheus/prometheus/releases/download/${PROM_VERSION}/prometheus-${PROM_VERSION#v}.linux-amd64.tar.gz && \
          tar xzf prom.tar.gz && \
          sudo mv prometheus-*.linux-amd64/promtool /usr/local/bin/promtool && \
          promtool --version

      - name: Lint dashboard PromQL (strict, sanitized)
        run: |
          python scripts/lint_dashboard_promql.py --require-promtool --sanitize-templated

      - name: Regenerate metrics module & catalog (best-effort)
        run: |
          python scripts/gen_metrics.py || true
          python scripts/gen_metrics_catalog.py || true
          python scripts/gen_metrics_docs.py || true
          python scripts/gen_metrics_glossary.py || true

      - name: Warm metrics & enforce drift (strict)
        env:
          G6_METRICS_STRICT: '1'
        run: |
          python scripts/exercise_metrics.py --run-drift-check --strict-drift || true

      - name: Fail if generated changes not committed
        run: |
          git diff --exit-code || (echo 'Uncommitted generated artifacts found. Run generation locally and commit.' && exit 1)
