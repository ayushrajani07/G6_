#!/usr/bin/env python
"""Scan repository for environment variables (G6_*) and emit artifacts.

Artifacts:
  tools/env_vars.json
  docs/environment.md (rewritten section between markers if present)
"""
from __future__ import annotations

import json
import re
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
TOOLS = ROOT / 'tools'
TOOLS.mkdir(exist_ok=True)
JSON_OUT = TOOLS / 'env_vars.json'
DOC_OUT = ROOT / 'docs' / 'environment.md'

ENV_PATTERN = re.compile(r"os\.(?:getenv|environ\.get)\(\s*['\"](G6_[A-Z0-9_]+)['\"]")

def scan_files() -> list[str]:
    vars_found: set[str] = set()
    for p in ROOT.rglob('*.py'):
        try:
            txt = p.read_text(encoding='utf-8', errors='ignore')
        except Exception:
            continue
        for m in ENV_PATTERN.finditer(txt):
            vars_found.add(m.group(1))
    return sorted(vars_found)

def emit_json(vars_list: list[str]) -> None:
    JSON_OUT.write_text(json.dumps({'env_vars': vars_list}, indent=2), encoding='utf-8')
    print(f"[env-scan] wrote {JSON_OUT} count={len(vars_list)}")

def emit_markdown(vars_list: list[str]) -> None:
    lines = [
        '# Environment Variables (Auto-Scanned)',
        '',
        'This file is generated by `scripts/cleanup/env_scan.py`. Do not hand-edit the table; add narrative *around* the markers.',
        '',
        '| Name | Status | Notes |',
        '|------|--------|-------|',
    ]
    for v in vars_list:
        status = 'active'
        if v.endswith('_DEPRECATED'):
            status = 'deprecated'
        lines.append(f"| {v} | {status} | |")
    DOC_OUT.write_text('\n'.join(lines) + '\n', encoding='utf-8')
    print(f"[env-scan] wrote {DOC_OUT} table_rows={len(vars_list)}")

def main() -> int:
    vars_list = scan_files()
    emit_json(vars_list)
    emit_markdown(vars_list)
    return 0

if __name__ == '__main__':
    raise SystemExit(main())
